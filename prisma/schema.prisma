// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model UserConversation {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  userId         String       @db.ObjectId
  conversationId String       @db.ObjectId

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation  Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
}

model User {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String             @unique
  emailVerified    DateTime?
  password         String?
  image            String?
  role             Role               @default(USER)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  accounts         Account[]
  sessions         Session[]
  orders           Order[]
  cart             Cart?
  sentMessages     Message[]          @relation("SentMessages")
  receivedMessages Message[]          @relation("ReceivedMessages")
  conversations    UserConversation[] // Fix relasi many-to-many
  discussions      Discussion[]       // Added discussions
  comments         Comment[]          // Added comments
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  price       Float
  description String
  category    String
  image       String
  rating      Rating
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
  discussions Discussion[]
}

type Rating {
  rate  Float
  count Int
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     OrderItem[]
  status    OrderStatus @default(PENDING)
  total     Float
  address   Address
  email     String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  invoiceId String      @unique
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type Address {
  street  String
  city    String
  state   String
  zip     String
  country String
}

model Discount {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  code        String    @unique
  rate        Float
  minPurchase Float?
  description String
  expiryDate  DateTime?
  category    String
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Conversation {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  topic     String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  messages  Message[]
  users     UserConversation[] // Fix relasi many-to-many
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  createdAt      DateTime     @default(now())
  senderId       String       @db.ObjectId
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId     String?      @db.ObjectId
  receiver       User?        @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: SetNull)
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  read           Boolean      @default(false)
}

// New models for product discussions
model Discussion {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String    @db.ObjectId
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  content      String
  userId       String     @db.ObjectId
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  discussionId String     @db.ObjectId
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}